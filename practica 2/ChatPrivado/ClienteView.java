
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.LayoutManager;
import java.awt.TextArea;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jose
 */
public class ClienteView extends javax.swing.JFrame {

    private final String PUBLICO = "Público";
    private String miNombre;
    private Server_I servidor;
    private DefaultListModel listModel;

    private TreeMap<String, Client_I> clientes;
    private TreeMap<String, JTextArea> conversaciones;

    /**
     * Creates new form ClienteView
     *
     * @param servidor
     * @param nombre
     */
    public ClienteView(Server_I servidor, String nombre) {
	initComponents();
	setTitle(nombre);

	this.servidor = servidor;
	this.miNombre = nombre;
	clientes = new TreeMap<>();
	listModel = new DefaultListModel();
	conversaciones = new TreeMap<>();
	addTab(PUBLICO);

	addWindowListener(new WindowAdapter() {

	    @Override
	    public void windowClosing(WindowEvent we) {
		desconectar();
	    }
	});

	campoMensaje.addKeyListener(new KeyAdapter() {

	    @Override
	    public void keyPressed(KeyEvent ke) {
		int tecla = ke.getKeyCode();
		if (tecla == KeyEvent.VK_ENTER) {
		    enviarMensaje(campoMensaje.getText());
		}
	    }
	});

	MouseListener mouseListener = new MouseAdapter() {
	    @Override
	    public void mouseClicked(MouseEvent mouseEvent) {
		JList theList = (JList) mouseEvent.getSource();
		if (mouseEvent.getClickCount() == 2) {
		    int index = theList.locationToIndex(mouseEvent.getPoint());
		    if (index >= 0) {
			Object o = theList.getModel().getElementAt(index);
			abrirVentana(o.toString());
		    }
		}
	    }
	};
	jList1.addMouseListener(mouseListener);
	campoMensaje.requestFocus();
	mostrarMensaje(PUBLICO, "Chat: Bienvenido al chat " + miNombre);
//	UIManager.put("TabbedPane.unselectedBackground", Color.GRAY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        campoMensaje = new javax.swing.JTextField();
        botonEnviar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        boton_cerrarVentana = new javax.swing.JButton();
        tabPanel = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 0));
        setPreferredSize(new java.awt.Dimension(600, 470));
        setResizable(false);

        campoMensaje.setToolTipText("Escribe el mensaje a enviar...");

        botonEnviar.setText("Enviar");
        botonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        boton_cerrarVentana.setText("Cerrar Conversación");
        boton_cerrarVentana.setMaximumSize(new java.awt.Dimension(200, 23));
        boton_cerrarVentana.setMinimumSize(new java.awt.Dimension(200, 23));
        boton_cerrarVentana.setPreferredSize(new java.awt.Dimension(200, 23));
        boton_cerrarVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cerrarVentanaActionPerformed(evt);
            }
        });

        tabPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPanelStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(campoMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonEnviar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boton_cerrarVentana, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boton_cerrarVentana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnviarActionPerformed
	enviarMensaje(campoMensaje.getText());
	campoMensaje.requestFocus();
    }//GEN-LAST:event_botonEnviarActionPerformed

    private void tabPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPanelStateChanged
	int index = tabPanel.getSelectedIndex();
	if (index < conversaciones.size()) {
	    tabPanel.setBackgroundAt(index, new Color(240, 240, 240));
	}
	if(tabPanel.getTitleAt(index).equals(PUBLICO)){
	    boton_cerrarVentana.setEnabled(false);
	}else{
	    boton_cerrarVentana.setEnabled(true);
	}
    }//GEN-LAST:event_tabPanelStateChanged

    private void boton_cerrarVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cerrarVentanaActionPerformed
	if (!tabPanel.getTitleAt(tabPanel.getSelectedIndex()).equals(PUBLICO)) {
	    conversaciones.remove(tabPanel.getTitleAt(tabPanel.getSelectedIndex()));
	    tabPanel.remove(tabPanel.getSelectedIndex());
	}
    }//GEN-LAST:event_boton_cerrarVentanaActionPerformed
   
    private int addTab(String nombre) {
	JTextArea jTextArea = new JTextArea();
	jTextArea.setLineWrap(true);
	jTextArea.setWrapStyleWord(true);
	jTextArea.setEditable(false);
	
	JScrollPane jScrollPane = new JScrollPane(jTextArea);
	jScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
	
	tabPanel.addTab(nombre, jScrollPane);
	conversaciones.put(nombre, jTextArea);
	
	return tabPanel.indexOfTab(nombre);
    }
    
    private JTextArea getTextAreaPane(String nombre){
	JTextArea textArea = conversaciones.get(nombre);
	return textArea;
    }

    private void abrirVentana(String nombre) {
	int index;
	if (!conversaciones.containsKey(nombre)){
	    index = addTab(nombre);
	}else {
	    index = tabPanel.indexOfTab(nombre);
	}
	tabPanel.setSelectedIndex(index);
    }

    public void mostrarMensaje(String nombreVentana, String mensaje) {
	int index = tabPanel.indexOfTab(nombreVentana);
	if (index == -1) {
	    index = addTab(nombreVentana);
	}
	JTextArea ventana = getTextAreaPane(nombreVentana);
	ventana.append("\n" + mensaje);
	ventana.setCaretPosition(ventana.getDocument().getLength());
	if (index != tabPanel.getSelectedIndex()) {
	    tabPanel.setBackgroundAt(index, Color.ORANGE);
	}
    }

    public void enviarMensaje(String mensaje) {
	int index = tabPanel.getSelectedIndex();
	String nombre = tabPanel.getTitleAt(index);
	mensaje = miNombre + ": " + mensaje;
	if (nombre.equals(PUBLICO)) {
	    for (Client_I cliente : clientes.values()) {
		try {
		    cliente.mostrarMensaje(PUBLICO, mensaje);
		} catch (RemoteException ex) {
		    System.out.println(ex.toString());
		}
	    }
	    mostrarMensaje(PUBLICO, mensaje);
	} else {
	    Client_I stub = clientes.get(nombre);
	    if (stub != null) {
		try {
		    stub.mostrarMensaje(miNombre, mensaje);
		    mostrarMensaje(nombre, mensaje);
		} catch (RemoteException ex) {
		    mostrarMensaje(nombre, nombre + " se ha desconectado.");
		}
	    } else {
		mostrarMensaje(nombre, nombre + " se ha desconectado.");
	    }
	}
	campoMensaje.setText("");
    }

    private void actualizarLista() {
	listModel.clear();
	for (String name : clientes.keySet()) {
	    listModel.addElement(name);
	}
	jList1.setModel(listModel);
    }

    public void addUsuario(String nombre, Client_I otroUsuario) {
	clientes.put(nombre, otroUsuario);
	actualizarLista();
	mostrarMensaje(PUBLICO, "Chat: " + nombre + " se ha conectado.");
    }

    public void addUsuarios(TreeMap<String, Client_I> usuarios) throws RemoteException {
	clientes = usuarios;
	actualizarLista();
    }

    void removeUsuario(String nombre) {
	clientes.remove(nombre);
	listModel.removeElement(nombre);
	jList1.setModel(listModel);
	mostrarMensaje(PUBLICO, "Chat: " + nombre + " se ha desconectado.");
    }

    public void desconectar() {
	try {
	    servidor.desconectar(miNombre);
	} catch (RemoteException ex) {
	    System.out.println(ex.toString());
	}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEnviar;
    private javax.swing.JButton boton_cerrarVentana;
    private javax.swing.JTextField campoMensaje;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane tabPanel;
    // End of variables declaration//GEN-END:variables

}
